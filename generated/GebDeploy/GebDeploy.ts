// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogNote extends ethereum.Event {
  get params(): LogNote__Params {
    return new LogNote__Params(this);
  }
}

export class LogNote__Params {
  _event: LogNote;

  constructor(event: LogNote) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get usr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get arg1(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get arg2(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class LogSetAuthority extends ethereum.Event {
  get params(): LogSetAuthority__Params {
    return new LogSetAuthority__Params(this);
  }
}

export class LogSetAuthority__Params {
  _event: LogSetAuthority;

  constructor(event: LogSetAuthority) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetOwner extends ethereum.Event {
  get params(): LogSetOwner__Params {
    return new LogSetOwner__Params(this);
  }
}

export class LogSetOwner__Params {
  _event: LogSetOwner;

  constructor(event: LogSetOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GebDeploy__collateralTypesResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class GebDeploy extends ethereum.SmartContract {
  static bind(address: Address): GebDeploy {
    return new GebDeploy("GebDeploy", address);
  }

  accountingEngine(): Address {
    let result = super.call(
      "accountingEngine",
      "accountingEngine():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_accountingEngine(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accountingEngine",
      "accountingEngine():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountingEngineFactory(): Address {
    let result = super.call(
      "accountingEngineFactory",
      "accountingEngineFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_accountingEngineFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accountingEngineFactory",
      "accountingEngineFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  authority(): Address {
    let result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    let result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cdpEngine(): Address {
    let result = super.call("cdpEngine", "cdpEngine():(address)", []);

    return result[0].toAddress();
  }

  try_cdpEngine(): ethereum.CallResult<Address> {
    let result = super.tryCall("cdpEngine", "cdpEngine():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cdpEngineFactory(): Address {
    let result = super.call(
      "cdpEngineFactory",
      "cdpEngineFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_cdpEngineFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "cdpEngineFactory",
      "cdpEngineFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coin(): Address {
    let result = super.call("coin", "coin():(address)", []);

    return result[0].toAddress();
  }

  try_coin(): ethereum.CallResult<Address> {
    let result = super.tryCall("coin", "coin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coinFactory(): Address {
    let result = super.call("coinFactory", "coinFactory():(address)", []);

    return result[0].toAddress();
  }

  try_coinFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("coinFactory", "coinFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coinJoin(): Address {
    let result = super.call("coinJoin", "coinJoin():(address)", []);

    return result[0].toAddress();
  }

  try_coinJoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("coinJoin", "coinJoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coinJoinFactory(): Address {
    let result = super.call(
      "coinJoinFactory",
      "coinJoinFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_coinJoinFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coinJoinFactory",
      "coinJoinFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coinSavingsAccount(): Address {
    let result = super.call(
      "coinSavingsAccount",
      "coinSavingsAccount():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_coinSavingsAccount(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coinSavingsAccount",
      "coinSavingsAccount():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coinSavingsAccountFactory(): Address {
    let result = super.call(
      "coinSavingsAccountFactory",
      "coinSavingsAccountFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_coinSavingsAccountFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coinSavingsAccountFactory",
      "coinSavingsAccountFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralTypes(param0: Bytes): GebDeploy__collateralTypesResult {
    let result = super.call(
      "collateralTypes",
      "collateralTypes(bytes32):(address,address,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new GebDeploy__collateralTypesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_collateralTypes(
    param0: Bytes
  ): ethereum.CallResult<GebDeploy__collateralTypesResult> {
    let result = super.tryCall(
      "collateralTypes",
      "collateralTypes(bytes32):(address,address,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GebDeploy__collateralTypesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  debtAuctionHouse(): Address {
    let result = super.call(
      "debtAuctionHouse",
      "debtAuctionHouse():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_debtAuctionHouse(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "debtAuctionHouse",
      "debtAuctionHouse():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  debtAuctionHouseFactory(): Address {
    let result = super.call(
      "debtAuctionHouseFactory",
      "debtAuctionHouseFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_debtAuctionHouseFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "debtAuctionHouseFactory",
      "debtAuctionHouseFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  englishCollateralAuctionHouseFactory(): Address {
    let result = super.call(
      "englishCollateralAuctionHouseFactory",
      "englishCollateralAuctionHouseFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_englishCollateralAuctionHouseFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "englishCollateralAuctionHouseFactory",
      "englishCollateralAuctionHouseFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  esm(): Address {
    let result = super.call("esm", "esm():(address)", []);

    return result[0].toAddress();
  }

  try_esm(): ethereum.CallResult<Address> {
    let result = super.tryCall("esm", "esm():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  esmFactory(): Address {
    let result = super.call("esmFactory", "esmFactory():(address)", []);

    return result[0].toAddress();
  }

  try_esmFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("esmFactory", "esmFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fixedDiscountCollateralAuctionHouseFactory(): Address {
    let result = super.call(
      "fixedDiscountCollateralAuctionHouseFactory",
      "fixedDiscountCollateralAuctionHouseFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_fixedDiscountCollateralAuctionHouseFactory(): ethereum.CallResult<
    Address
  > {
    let result = super.tryCall(
      "fixedDiscountCollateralAuctionHouseFactory",
      "fixedDiscountCollateralAuctionHouseFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  globalSettlement(): Address {
    let result = super.call(
      "globalSettlement",
      "globalSettlement():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_globalSettlement(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "globalSettlement",
      "globalSettlement():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  globalSettlementFactory(): Address {
    let result = super.call(
      "globalSettlementFactory",
      "globalSettlementFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_globalSettlementFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "globalSettlementFactory",
      "globalSettlementFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationEngine(): Address {
    let result = super.call(
      "liquidationEngine",
      "liquidationEngine():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidationEngine(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidationEngine",
      "liquidationEngine():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationEngineFactory(): Address {
    let result = super.call(
      "liquidationEngineFactory",
      "liquidationEngineFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidationEngineFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidationEngineFactory",
      "liquidationEngineFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracleRelayer(): Address {
    let result = super.call("oracleRelayer", "oracleRelayer():(address)", []);

    return result[0].toAddress();
  }

  try_oracleRelayer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleRelayer",
      "oracleRelayer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracleRelayerFactory(): Address {
    let result = super.call(
      "oracleRelayerFactory",
      "oracleRelayerFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_oracleRelayerFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleRelayerFactory",
      "oracleRelayerFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pause(): Address {
    let result = super.call("pause", "pause():(address)", []);

    return result[0].toAddress();
  }

  try_pause(): ethereum.CallResult<Address> {
    let result = super.tryCall("pause", "pause():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pauseFactory(): Address {
    let result = super.call("pauseFactory", "pauseFactory():(address)", []);

    return result[0].toAddress();
  }

  try_pauseFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("pauseFactory", "pauseFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  postSettlementSurplusAuctionHouse(): Address {
    let result = super.call(
      "postSettlementSurplusAuctionHouse",
      "postSettlementSurplusAuctionHouse():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_postSettlementSurplusAuctionHouse(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "postSettlementSurplusAuctionHouse",
      "postSettlementSurplusAuctionHouse():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  postSettlementSurplusAuctionHouseFactory(): Address {
    let result = super.call(
      "postSettlementSurplusAuctionHouseFactory",
      "postSettlementSurplusAuctionHouseFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_postSettlementSurplusAuctionHouseFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "postSettlementSurplusAuctionHouseFactory",
      "postSettlementSurplusAuctionHouseFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  preSettlementSurplusAuctionHouse(): Address {
    let result = super.call(
      "preSettlementSurplusAuctionHouse",
      "preSettlementSurplusAuctionHouse():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_preSettlementSurplusAuctionHouse(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "preSettlementSurplusAuctionHouse",
      "preSettlementSurplusAuctionHouse():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  preSettlementSurplusAuctionHouseFactory(): Address {
    let result = super.call(
      "preSettlementSurplusAuctionHouseFactory",
      "preSettlementSurplusAuctionHouseFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_preSettlementSurplusAuctionHouseFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "preSettlementSurplusAuctionHouseFactory",
      "preSettlementSurplusAuctionHouseFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settlementSurplusAuctioneer(): Address {
    let result = super.call(
      "settlementSurplusAuctioneer",
      "settlementSurplusAuctioneer():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_settlementSurplusAuctioneer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "settlementSurplusAuctioneer",
      "settlementSurplusAuctioneer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settlementSurplusAuctioneerFactory(): Address {
    let result = super.call(
      "settlementSurplusAuctioneerFactory",
      "settlementSurplusAuctioneerFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_settlementSurplusAuctioneerFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "settlementSurplusAuctioneerFactory",
      "settlementSurplusAuctioneerFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stabilityFeeTreasury(): Address {
    let result = super.call(
      "stabilityFeeTreasury",
      "stabilityFeeTreasury():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stabilityFeeTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stabilityFeeTreasury",
      "stabilityFeeTreasury():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stabilityFeeTreasuryFactory(): Address {
    let result = super.call(
      "stabilityFeeTreasuryFactory",
      "stabilityFeeTreasuryFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stabilityFeeTreasuryFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stabilityFeeTreasuryFactory",
      "stabilityFeeTreasuryFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  taxCollector(): Address {
    let result = super.call("taxCollector", "taxCollector():(address)", []);

    return result[0].toAddress();
  }

  try_taxCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall("taxCollector", "taxCollector():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  taxCollectorFactory(): Address {
    let result = super.call(
      "taxCollectorFactory",
      "taxCollectorFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_taxCollectorFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "taxCollectorFactory",
      "taxCollectorFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddAuthToCollateralAuctionHouseCall extends ethereum.Call {
  get inputs(): AddAuthToCollateralAuctionHouseCall__Inputs {
    return new AddAuthToCollateralAuctionHouseCall__Inputs(this);
  }

  get outputs(): AddAuthToCollateralAuctionHouseCall__Outputs {
    return new AddAuthToCollateralAuctionHouseCall__Outputs(this);
  }
}

export class AddAuthToCollateralAuctionHouseCall__Inputs {
  _call: AddAuthToCollateralAuctionHouseCall;

  constructor(call: AddAuthToCollateralAuctionHouseCall) {
    this._call = call;
  }

  get collateralType(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get usr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddAuthToCollateralAuctionHouseCall__Outputs {
  _call: AddAuthToCollateralAuctionHouseCall;

  constructor(call: AddAuthToCollateralAuctionHouseCall) {
    this._call = call;
  }
}

export class AddCreatorAuthCall extends ethereum.Call {
  get inputs(): AddCreatorAuthCall__Inputs {
    return new AddCreatorAuthCall__Inputs(this);
  }

  get outputs(): AddCreatorAuthCall__Outputs {
    return new AddCreatorAuthCall__Outputs(this);
  }
}

export class AddCreatorAuthCall__Inputs {
  _call: AddCreatorAuthCall;

  constructor(call: AddCreatorAuthCall) {
    this._call = call;
  }
}

export class AddCreatorAuthCall__Outputs {
  _call: AddCreatorAuthCall;

  constructor(call: AddCreatorAuthCall) {
    this._call = call;
  }
}

export class DeployAccountingEngineCall extends ethereum.Call {
  get inputs(): DeployAccountingEngineCall__Inputs {
    return new DeployAccountingEngineCall__Inputs(this);
  }

  get outputs(): DeployAccountingEngineCall__Outputs {
    return new DeployAccountingEngineCall__Outputs(this);
  }
}

export class DeployAccountingEngineCall__Inputs {
  _call: DeployAccountingEngineCall;

  constructor(call: DeployAccountingEngineCall) {
    this._call = call;
  }
}

export class DeployAccountingEngineCall__Outputs {
  _call: DeployAccountingEngineCall;

  constructor(call: DeployAccountingEngineCall) {
    this._call = call;
  }
}

export class DeployAuctionsCall extends ethereum.Call {
  get inputs(): DeployAuctionsCall__Inputs {
    return new DeployAuctionsCall__Inputs(this);
  }

  get outputs(): DeployAuctionsCall__Outputs {
    return new DeployAuctionsCall__Outputs(this);
  }
}

export class DeployAuctionsCall__Inputs {
  _call: DeployAuctionsCall;

  constructor(call: DeployAuctionsCall) {
    this._call = call;
  }

  get prot(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeployAuctionsCall__Outputs {
  _call: DeployAuctionsCall;

  constructor(call: DeployAuctionsCall) {
    this._call = call;
  }
}

export class DeployCDPEngineCall extends ethereum.Call {
  get inputs(): DeployCDPEngineCall__Inputs {
    return new DeployCDPEngineCall__Inputs(this);
  }

  get outputs(): DeployCDPEngineCall__Outputs {
    return new DeployCDPEngineCall__Outputs(this);
  }
}

export class DeployCDPEngineCall__Inputs {
  _call: DeployCDPEngineCall;

  constructor(call: DeployCDPEngineCall) {
    this._call = call;
  }
}

export class DeployCDPEngineCall__Outputs {
  _call: DeployCDPEngineCall;

  constructor(call: DeployCDPEngineCall) {
    this._call = call;
  }
}

export class DeployCoinCall extends ethereum.Call {
  get inputs(): DeployCoinCall__Inputs {
    return new DeployCoinCall__Inputs(this);
  }

  get outputs(): DeployCoinCall__Outputs {
    return new DeployCoinCall__Outputs(this);
  }
}

export class DeployCoinCall__Inputs {
  _call: DeployCoinCall;

  constructor(call: DeployCoinCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get chainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DeployCoinCall__Outputs {
  _call: DeployCoinCall;

  constructor(call: DeployCoinCall) {
    this._call = call;
  }
}

export class DeployCollateralCall extends ethereum.Call {
  get inputs(): DeployCollateralCall__Inputs {
    return new DeployCollateralCall__Inputs(this);
  }

  get outputs(): DeployCollateralCall__Outputs {
    return new DeployCollateralCall__Outputs(this);
  }
}

export class DeployCollateralCall__Inputs {
  _call: DeployCollateralCall;

  constructor(call: DeployCollateralCall) {
    this._call = call;
  }

  get auctionHouseType(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get collateralType(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get adapter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get collateralOSM(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get collateralMedian(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get systemCoinOracle(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get bidToMarketPriceRatio(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class DeployCollateralCall__Outputs {
  _call: DeployCollateralCall;

  constructor(call: DeployCollateralCall) {
    this._call = call;
  }
}

export class DeployLiquidatorCall extends ethereum.Call {
  get inputs(): DeployLiquidatorCall__Inputs {
    return new DeployLiquidatorCall__Inputs(this);
  }

  get outputs(): DeployLiquidatorCall__Outputs {
    return new DeployLiquidatorCall__Outputs(this);
  }
}

export class DeployLiquidatorCall__Inputs {
  _call: DeployLiquidatorCall;

  constructor(call: DeployLiquidatorCall) {
    this._call = call;
  }
}

export class DeployLiquidatorCall__Outputs {
  _call: DeployLiquidatorCall;

  constructor(call: DeployLiquidatorCall) {
    this._call = call;
  }
}

export class DeployPauseCall extends ethereum.Call {
  get inputs(): DeployPauseCall__Inputs {
    return new DeployPauseCall__Inputs(this);
  }

  get outputs(): DeployPauseCall__Outputs {
    return new DeployPauseCall__Outputs(this);
  }
}

export class DeployPauseCall__Inputs {
  _call: DeployPauseCall;

  constructor(call: DeployPauseCall) {
    this._call = call;
  }

  get delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get authority(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeployPauseCall__Outputs {
  _call: DeployPauseCall;

  constructor(call: DeployPauseCall) {
    this._call = call;
  }
}

export class DeploySavingsAccountCall extends ethereum.Call {
  get inputs(): DeploySavingsAccountCall__Inputs {
    return new DeploySavingsAccountCall__Inputs(this);
  }

  get outputs(): DeploySavingsAccountCall__Outputs {
    return new DeploySavingsAccountCall__Outputs(this);
  }
}

export class DeploySavingsAccountCall__Inputs {
  _call: DeploySavingsAccountCall;

  constructor(call: DeploySavingsAccountCall) {
    this._call = call;
  }
}

export class DeploySavingsAccountCall__Outputs {
  _call: DeploySavingsAccountCall;

  constructor(call: DeploySavingsAccountCall) {
    this._call = call;
  }
}

export class DeploySettlementSurplusAuctioneerCall extends ethereum.Call {
  get inputs(): DeploySettlementSurplusAuctioneerCall__Inputs {
    return new DeploySettlementSurplusAuctioneerCall__Inputs(this);
  }

  get outputs(): DeploySettlementSurplusAuctioneerCall__Outputs {
    return new DeploySettlementSurplusAuctioneerCall__Outputs(this);
  }
}

export class DeploySettlementSurplusAuctioneerCall__Inputs {
  _call: DeploySettlementSurplusAuctioneerCall;

  constructor(call: DeploySettlementSurplusAuctioneerCall) {
    this._call = call;
  }
}

export class DeploySettlementSurplusAuctioneerCall__Outputs {
  _call: DeploySettlementSurplusAuctioneerCall;

  constructor(call: DeploySettlementSurplusAuctioneerCall) {
    this._call = call;
  }
}

export class DeployShutdownCall extends ethereum.Call {
  get inputs(): DeployShutdownCall__Inputs {
    return new DeployShutdownCall__Inputs(this);
  }

  get outputs(): DeployShutdownCall__Outputs {
    return new DeployShutdownCall__Outputs(this);
  }
}

export class DeployShutdownCall__Inputs {
  _call: DeployShutdownCall;

  constructor(call: DeployShutdownCall) {
    this._call = call;
  }

  get prot(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenBurner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get thresholdSetter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get threshold(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DeployShutdownCall__Outputs {
  _call: DeployShutdownCall;

  constructor(call: DeployShutdownCall) {
    this._call = call;
  }
}

export class DeployStabilityFeeTreasuryCall extends ethereum.Call {
  get inputs(): DeployStabilityFeeTreasuryCall__Inputs {
    return new DeployStabilityFeeTreasuryCall__Inputs(this);
  }

  get outputs(): DeployStabilityFeeTreasuryCall__Outputs {
    return new DeployStabilityFeeTreasuryCall__Outputs(this);
  }
}

export class DeployStabilityFeeTreasuryCall__Inputs {
  _call: DeployStabilityFeeTreasuryCall;

  constructor(call: DeployStabilityFeeTreasuryCall) {
    this._call = call;
  }
}

export class DeployStabilityFeeTreasuryCall__Outputs {
  _call: DeployStabilityFeeTreasuryCall;

  constructor(call: DeployStabilityFeeTreasuryCall) {
    this._call = call;
  }
}

export class DeployTaxationCall extends ethereum.Call {
  get inputs(): DeployTaxationCall__Inputs {
    return new DeployTaxationCall__Inputs(this);
  }

  get outputs(): DeployTaxationCall__Outputs {
    return new DeployTaxationCall__Outputs(this);
  }
}

export class DeployTaxationCall__Inputs {
  _call: DeployTaxationCall;

  constructor(call: DeployTaxationCall) {
    this._call = call;
  }
}

export class DeployTaxationCall__Outputs {
  _call: DeployTaxationCall;

  constructor(call: DeployTaxationCall) {
    this._call = call;
  }
}

export class GiveControlCall extends ethereum.Call {
  get inputs(): GiveControlCall__Inputs {
    return new GiveControlCall__Inputs(this);
  }

  get outputs(): GiveControlCall__Outputs {
    return new GiveControlCall__Outputs(this);
  }
}

export class GiveControlCall__Inputs {
  _call: GiveControlCall;

  constructor(call: GiveControlCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GiveControlCall__Outputs {
  _call: GiveControlCall;

  constructor(call: GiveControlCall) {
    this._call = call;
  }
}

export class ReleaseAuthCall extends ethereum.Call {
  get inputs(): ReleaseAuthCall__Inputs {
    return new ReleaseAuthCall__Inputs(this);
  }

  get outputs(): ReleaseAuthCall__Outputs {
    return new ReleaseAuthCall__Outputs(this);
  }
}

export class ReleaseAuthCall__Inputs {
  _call: ReleaseAuthCall;

  constructor(call: ReleaseAuthCall) {
    this._call = call;
  }
}

export class ReleaseAuthCall__Outputs {
  _call: ReleaseAuthCall;

  constructor(call: ReleaseAuthCall) {
    this._call = call;
  }
}

export class ReleaseAuthCollateralAuctionHouseCall extends ethereum.Call {
  get inputs(): ReleaseAuthCollateralAuctionHouseCall__Inputs {
    return new ReleaseAuthCollateralAuctionHouseCall__Inputs(this);
  }

  get outputs(): ReleaseAuthCollateralAuctionHouseCall__Outputs {
    return new ReleaseAuthCollateralAuctionHouseCall__Outputs(this);
  }
}

export class ReleaseAuthCollateralAuctionHouseCall__Inputs {
  _call: ReleaseAuthCollateralAuctionHouseCall;

  constructor(call: ReleaseAuthCollateralAuctionHouseCall) {
    this._call = call;
  }

  get collateralType(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get usr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ReleaseAuthCollateralAuctionHouseCall__Outputs {
  _call: ReleaseAuthCollateralAuctionHouseCall;

  constructor(call: ReleaseAuthCollateralAuctionHouseCall) {
    this._call = call;
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get authority_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class SetFirstFactoryBatchCall extends ethereum.Call {
  get inputs(): SetFirstFactoryBatchCall__Inputs {
    return new SetFirstFactoryBatchCall__Inputs(this);
  }

  get outputs(): SetFirstFactoryBatchCall__Outputs {
    return new SetFirstFactoryBatchCall__Outputs(this);
  }
}

export class SetFirstFactoryBatchCall__Inputs {
  _call: SetFirstFactoryBatchCall;

  constructor(call: SetFirstFactoryBatchCall) {
    this._call = call;
  }

  get cdpEngineFactory_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get taxCollectorFactory_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get accountingEngineFactory_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get liquidationEngineFactory_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get coinFactory_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get coinJoinFactory_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get coinSavingsAccountFactory_(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get settlementSurplusAuctioneerFactory_(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class SetFirstFactoryBatchCall__Outputs {
  _call: SetFirstFactoryBatchCall;

  constructor(call: SetFirstFactoryBatchCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetSecondFactoryBatchCall extends ethereum.Call {
  get inputs(): SetSecondFactoryBatchCall__Inputs {
    return new SetSecondFactoryBatchCall__Inputs(this);
  }

  get outputs(): SetSecondFactoryBatchCall__Outputs {
    return new SetSecondFactoryBatchCall__Outputs(this);
  }
}

export class SetSecondFactoryBatchCall__Inputs {
  _call: SetSecondFactoryBatchCall;

  constructor(call: SetSecondFactoryBatchCall) {
    this._call = call;
  }

  get preSettlementSurplusAuctionHouseFactory_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get postSettlementSurplusAuctionHouseFactory_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get debtAuctionHouseFactory_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get englishCollateralAuctionHouseFactory_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get fixedDiscountCollateralAuctionHouseFactory_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get oracleRelayerFactory_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get globalSettlementFactory_(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get esmFactory_(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class SetSecondFactoryBatchCall__Outputs {
  _call: SetSecondFactoryBatchCall;

  constructor(call: SetSecondFactoryBatchCall) {
    this._call = call;
  }
}

export class SetThirdFactoryBatchCall extends ethereum.Call {
  get inputs(): SetThirdFactoryBatchCall__Inputs {
    return new SetThirdFactoryBatchCall__Inputs(this);
  }

  get outputs(): SetThirdFactoryBatchCall__Outputs {
    return new SetThirdFactoryBatchCall__Outputs(this);
  }
}

export class SetThirdFactoryBatchCall__Inputs {
  _call: SetThirdFactoryBatchCall;

  constructor(call: SetThirdFactoryBatchCall) {
    this._call = call;
  }

  get pauseFactory_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stabilityFeeTreasuryFactory_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetThirdFactoryBatchCall__Outputs {
  _call: SetThirdFactoryBatchCall;

  constructor(call: SetThirdFactoryBatchCall) {
    this._call = call;
  }
}

export class TakeControlCall extends ethereum.Call {
  get inputs(): TakeControlCall__Inputs {
    return new TakeControlCall__Inputs(this);
  }

  get outputs(): TakeControlCall__Outputs {
    return new TakeControlCall__Outputs(this);
  }
}

export class TakeControlCall__Inputs {
  _call: TakeControlCall;

  constructor(call: TakeControlCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TakeControlCall__Outputs {
  _call: TakeControlCall;

  constructor(call: TakeControlCall) {
    this._call = call;
  }
}

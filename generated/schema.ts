// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Cdp extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Cdp entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Cdp entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Cdp", id.toString(), this);
  }

  static load(id: string): Cdp | null {
    return store.get("Cdp", id) as Cdp | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cdpId(): BigInt | null {
    let value = this.get("cdpId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cdpId(value: BigInt | null) {
    if (value === null) {
      this.unset("cdpId");
    } else {
      this.set("cdpId", Value.fromBigInt(value as BigInt));
    }
  }

  get collateralType(): string {
    let value = this.get("collateralType");
    return value.toString();
  }

  set collateralType(value: string) {
    this.set("collateralType", Value.fromString(value));
  }

  get collateral(): BigDecimal {
    let value = this.get("collateral");
    return value.toBigDecimal();
  }

  set collateral(value: BigDecimal) {
    this.set("collateral", Value.fromBigDecimal(value));
  }

  get debt(): BigDecimal {
    let value = this.get("debt");
    return value.toBigDecimal();
  }

  set debt(value: BigDecimal) {
    this.set("debt", Value.fromBigDecimal(value));
  }

  get handler(): Bytes {
    let value = this.get("handler");
    return value.toBytes();
  }

  set handler(value: Bytes) {
    this.set("handler", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get openedAt(): BigInt {
    let value = this.get("openedAt");
    return value.toBigInt();
  }

  set openedAt(value: BigInt) {
    this.set("openedAt", Value.fromBigInt(value));
  }

  get openedAtBlock(): BigInt {
    let value = this.get("openedAtBlock");
    return value.toBigInt();
  }

  set openedAtBlock(value: BigInt) {
    this.set("openedAtBlock", Value.fromBigInt(value));
  }

  get openedAtTransaction(): Bytes {
    let value = this.get("openedAtTransaction");
    return value.toBytes();
  }

  set openedAtTransaction(value: Bytes) {
    this.set("openedAtTransaction", Value.fromBytes(value));
  }

  get modifiedAt(): BigInt | null {
    let value = this.get("modifiedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set modifiedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("modifiedAt");
    } else {
      this.set("modifiedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get modifiedAtBlock(): BigInt | null {
    let value = this.get("modifiedAtBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set modifiedAtBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("modifiedAtBlock");
    } else {
      this.set("modifiedAtBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get modifiedAtTransaction(): Bytes | null {
    let value = this.get("modifiedAtTransaction");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set modifiedAtTransaction(value: Bytes | null) {
    if (value === null) {
      this.unset("modifiedAtTransaction");
    } else {
      this.set("modifiedAtTransaction", Value.fromBytes(value as Bytes));
    }
  }
}

export class CollateralType extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollateralType entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollateralType entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollateralType", id.toString(), this);
  }

  static load(id: string): CollateralType | null {
    return store.get("CollateralType", id) as CollateralType | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get debtCeiling(): BigDecimal {
    let value = this.get("debtCeiling");
    return value.toBigDecimal();
  }

  set debtCeiling(value: BigDecimal) {
    this.set("debtCeiling", Value.fromBigDecimal(value));
  }

  get debtFloor(): BigDecimal {
    let value = this.get("debtFloor");
    return value.toBigDecimal();
  }

  set debtFloor(value: BigDecimal) {
    this.set("debtFloor", Value.fromBigDecimal(value));
  }

  get currentPrice(): string | null {
    let value = this.get("currentPrice");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentPrice(value: string | null) {
    if (value === null) {
      this.unset("currentPrice");
    } else {
      this.set("currentPrice", Value.fromString(value as string));
    }
  }

  get rate(): BigDecimal {
    let value = this.get("rate");
    return value.toBigDecimal();
  }

  set rate(value: BigDecimal) {
    this.set("rate", Value.fromBigDecimal(value));
  }

  get debtAmount(): BigDecimal {
    let value = this.get("debtAmount");
    return value.toBigDecimal();
  }

  set debtAmount(value: BigDecimal) {
    this.set("debtAmount", Value.fromBigDecimal(value));
  }

  get liquidationPenalty(): BigDecimal {
    let value = this.get("liquidationPenalty");
    return value.toBigDecimal();
  }

  set liquidationPenalty(value: BigDecimal) {
    this.set("liquidationPenalty", Value.fromBigDecimal(value));
  }

  get safetyCRatio(): BigDecimal {
    let value = this.get("safetyCRatio");
    return value.toBigDecimal();
  }

  set safetyCRatio(value: BigDecimal) {
    this.set("safetyCRatio", Value.fromBigDecimal(value));
  }

  get liquidationCRatio(): BigDecimal {
    let value = this.get("liquidationCRatio");
    return value.toBigDecimal();
  }

  set liquidationCRatio(value: BigDecimal) {
    this.set("liquidationCRatio", Value.fromBigDecimal(value));
  }

  get stabilityFee(): BigDecimal {
    let value = this.get("stabilityFee");
    return value.toBigDecimal();
  }

  set stabilityFee(value: BigDecimal) {
    this.set("stabilityFee", Value.fromBigDecimal(value));
  }

  get unmanagedCdpCount(): BigInt {
    let value = this.get("unmanagedCdpCount");
    return value.toBigInt();
  }

  set unmanagedCdpCount(value: BigInt) {
    this.set("unmanagedCdpCount", Value.fromBigInt(value));
  }

  get cdpCount(): BigInt {
    let value = this.get("cdpCount");
    return value.toBigInt();
  }

  set cdpCount(value: BigInt) {
    this.set("cdpCount", Value.fromBigInt(value));
  }

  get addedAt(): BigInt {
    let value = this.get("addedAt");
    return value.toBigInt();
  }

  set addedAt(value: BigInt) {
    this.set("addedAt", Value.fromBigInt(value));
  }

  get addedAtBlock(): BigInt {
    let value = this.get("addedAtBlock");
    return value.toBigInt();
  }

  set addedAtBlock(value: BigInt) {
    this.set("addedAtBlock", Value.fromBigInt(value));
  }

  get addedAtTransaction(): Bytes {
    let value = this.get("addedAtTransaction");
    return value.toBytes();
  }

  set addedAtTransaction(value: Bytes) {
    this.set("addedAtTransaction", Value.fromBytes(value));
  }

  get modifiedAt(): BigInt | null {
    let value = this.get("modifiedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set modifiedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("modifiedAt");
    } else {
      this.set("modifiedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get modifiedAtBlock(): BigInt | null {
    let value = this.get("modifiedAtBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set modifiedAtBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("modifiedAtBlock");
    } else {
      this.set("modifiedAtBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get modifiedAtTransaction(): Bytes | null {
    let value = this.get("modifiedAtTransaction");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set modifiedAtTransaction(value: Bytes | null) {
    if (value === null) {
      this.unset("modifiedAtTransaction");
    } else {
      this.set("modifiedAtTransaction", Value.fromBytes(value as Bytes));
    }
  }
}

export class CollateralPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollateralPrice entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollateralPrice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollateralPrice", id.toString(), this);
  }

  static load(id: string): CollateralPrice | null {
    return store.get("CollateralPrice", id) as CollateralPrice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get collateral(): string {
    let value = this.get("collateral");
    return value.toString();
  }

  set collateral(value: string) {
    this.set("collateral", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get safetyPrice(): BigDecimal {
    let value = this.get("safetyPrice");
    return value.toBigDecimal();
  }

  set safetyPrice(value: BigDecimal) {
    this.set("safetyPrice", Value.fromBigDecimal(value));
  }

  get liquidationPrice(): BigDecimal {
    let value = this.get("liquidationPrice");
    return value.toBigDecimal();
  }

  set liquidationPrice(value: BigDecimal) {
    this.set("liquidationPrice", Value.fromBigDecimal(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get proxies(): Array<string> | null {
    let value = this.get("proxies");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proxies(value: Array<string> | null) {
    if (value === null) {
      this.unset("proxies");
    } else {
      this.set("proxies", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class UserProxy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserProxy entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserProxy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserProxy", id.toString(), this);
  }

  static load(id: string): UserProxy | null {
    return store.get("UserProxy", id) as UserProxy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get cache(): Bytes {
    let value = this.get("cache");
    return value.toBytes();
  }

  set cache(value: Bytes) {
    this.set("cache", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class SystemState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SystemState entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SystemState entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SystemState", id.toString(), this);
  }

  static load(id: string): SystemState | null {
    return store.get("SystemState", id) as SystemState | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get totalDebt(): BigDecimal {
    let value = this.get("totalDebt");
    return value.toBigDecimal();
  }

  set totalDebt(value: BigDecimal) {
    this.set("totalDebt", Value.fromBigDecimal(value));
  }

  get collateralCount(): BigInt {
    let value = this.get("collateralCount");
    return value.toBigInt();
  }

  set collateralCount(value: BigInt) {
    this.set("collateralCount", Value.fromBigInt(value));
  }

  get collateralAuctionCount(): BigInt {
    let value = this.get("collateralAuctionCount");
    return value.toBigInt();
  }

  set collateralAuctionCount(value: BigInt) {
    this.set("collateralAuctionCount", Value.fromBigInt(value));
  }

  get proxyCount(): BigInt {
    let value = this.get("proxyCount");
    return value.toBigInt();
  }

  set proxyCount(value: BigInt) {
    this.set("proxyCount", Value.fromBigInt(value));
  }

  get unmanagedCdpCount(): BigInt {
    let value = this.get("unmanagedCdpCount");
    return value.toBigInt();
  }

  set unmanagedCdpCount(value: BigInt) {
    this.set("unmanagedCdpCount", Value.fromBigInt(value));
  }

  get cdpCount(): BigInt {
    let value = this.get("cdpCount");
    return value.toBigInt();
  }

  set cdpCount(value: BigInt) {
    this.set("cdpCount", Value.fromBigInt(value));
  }

  get baseStabilityFee(): BigDecimal {
    let value = this.get("baseStabilityFee");
    return value.toBigDecimal();
  }

  set baseStabilityFee(value: BigDecimal) {
    this.set("baseStabilityFee", Value.fromBigDecimal(value));
  }

  get savingsRate(): BigDecimal {
    let value = this.get("savingsRate");
    return value.toBigDecimal();
  }

  set savingsRate(value: BigDecimal) {
    this.set("savingsRate", Value.fromBigDecimal(value));
  }

  get totalDebtCeiling(): BigDecimal {
    let value = this.get("totalDebtCeiling");
    return value.toBigDecimal();
  }

  set totalDebtCeiling(value: BigDecimal) {
    this.set("totalDebtCeiling", Value.fromBigDecimal(value));
  }
}

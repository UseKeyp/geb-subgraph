specVersion: 0.0.2
description: The Graph protocol subgraph for GEB
repository: https://github.com/reflexer-labs/geb-subgraph
schema:
  file: ./schema.graphql
dataSources:
  - name: GebDeploy
    kind: ethereum/contract
    network: kovan
    source:
      address: '0xeF3efcdeAAEAb7F71d1aadDd38E52efFF9841d25'
      abi: GebDeploy
      startBlock: 19664937
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/init/geb-deployer.ts
      entities:
        - CDP
      abis:
        - name: GebDeploy
          file: ./abis/GebDeploy.json
      # eventHandlers:
      # - event: NewGravatar(uint256,address,string,string)
      #   handler: handleNewGravatar
      callHandlers:
        - function: deployCDPEngine()
          handler: handleDeployCDPEngine
templates:
  - name: CDPEngine
    kind: ethereum/contract
    network: kovan
    source:
      abi: CDPEngine
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/modules/core/cdp-engine.ts
      entities:
        - CDP
      abis:
        - name: CDPEngine
          file: ./abis/CDPEngine.json
      eventHandlers:
        - event: InitializeCollateralType(bytes32)
          handler: handleInitializeCollateralType
          # function init(bytes32 ilk)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0x3b66319500000000000000000000000000000000000000000000000000000000'
          #   handler: handleInit

          # # function file(bytes32 what, uint256 data)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0x29ae811400000000000000000000000000000000000000000000000000000000'
          #   handler: handleFile

          # # function file(bytes32 ilk, bytes32 what, uint256 data)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0x1a0b287e00000000000000000000000000000000000000000000000000000000'
          #   handler: handleFile

          # ### Fungibility ###

          # # function slip(bytes32 ilk, address usr, int256 wad)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0x7cdd3fde00000000000000000000000000000000000000000000000000000000'
          #   handler: handleSlip

          # # function flux(bytes32 ilk, address src, address dst, uint256 rad)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0x6111be2e00000000000000000000000000000000000000000000000000000000'
          #   handler: handleFlux

          # # function move(address src, address dst, uint256 rad)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0xbb35783b00000000000000000000000000000000000000000000000000000000'
          #   handler: handleMove

          # ### CDP Manipulation ###

          # # function frob(bytes32 i, address u, address v, address w, int256 dink, int256 dart)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0x7608870300000000000000000000000000000000000000000000000000000000'
          #   handler: handleFrob

          # ### CDP Fungibility ###

          # # function fork(bytes32 ilk, address src, address dst, int256 dink, int256 dart)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0x870c616d00000000000000000000000000000000000000000000000000000000'
          #   handler: handleFork

          # ### CDP Confiscation ###

          # # function grab(bytes32 i, address u, address v, address w, int256 dink, int256 dart)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0x7bab3f4000000000000000000000000000000000000000000000000000000000'
          #   handler: handleGrab

          # ### Settlement ###

          # # function heal(uint256 rad)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0xf37ac61c00000000000000000000000000000000000000000000000000000000'
          #   handler: handleHeal

          # # function suck(address u, address v, uint256 rad)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0xf24e23eb00000000000000000000000000000000000000000000000000000000'
          #   handler: handleSuck

          # ### Rates ###

          # # function fold(bytes32 i, address u, int256 rate)
          # - event: LogNote(indexed bytes4,indexed bytes32,indexed bytes32,indexed bytes32,bytes)
          #   topic0: '0xb65337df00000000000000000000000000000000000000000000000000000000'
          #   handler: handleFold
